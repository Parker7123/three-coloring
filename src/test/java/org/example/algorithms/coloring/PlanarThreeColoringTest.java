package org.example.algorithms.coloring;

import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.graph.SimpleGraph;
import org.jgrapht.nio.graph6.Graph6Sparse6Importer;
import org.jgrapht.util.SupplierUtil;
import org.junit.jupiter.api.Test;

import java.io.StringReader;
import java.time.Instant;

class PlanarThreeColoringTest {

    @Test
    void bigGridGraphTest() {
        Graph<Integer, DefaultEdge> graph = new SimpleGraph<>(SupplierUtil.createIntegerSupplier(),
                SupplierUtil.createDefaultEdgeSupplier(), false);
        Graph6Sparse6Importer<Integer, DefaultEdge> importer = new Graph6Sparse6Importer<>();
        importer.importGraph(graph, new StringReader("~?A}?????????????????????????????????????????????K???E???????????????????????????G??????????????????????????????????????????????????????????????????????O??????_??????_???????G??????A???????@???????C????????@???????@????????_?????O??????????_???????A????????C????????C????G????????@?????????G?????????O?????????_?????????O?????????O?????????A??????????C??????????G????????????C??????????A??????????G??????????@????????????_??????????@???????????C???????????A????????????O???????????A???????????@????????????A????????????_????????????O????????????A?????????????O?????????????O?????????????_????????????@??????????????_????????????_?????????????G??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????G??????????????????_??????????????????C??????????????????C???????????????????G??????????????????A???????????????????@???????????????????CO???????????????????o???????????????????_????????o????????C???????????go???????????????????????GO???????????????????????E?????????????????????????AA?????????????????????????S?????????????C????????O?????G@?????????_???????A?????@?G????????????@_?????????????_O?????????E?????????????@@???????????K????????????C?????????????o???????????AO????????????@_???????????c`?????????????????????????O??__???????????????????????????B???????????????????????????g??H????????????????????????????O@?O????????????????????????????_K????????????????????????????OAK???????????????????????_???A@??????????????????????A????_??C?G????????????????????C???O??A?O?O??W??????????????G????????????G??W??????????????C?????????????"));

        var planarThreeColoring = new PlanarThreeColoring<>(graph, false);

        long start = Instant.now().toEpochMilli();
        var coloring = planarThreeColoring.getColoring();
        long end = Instant.now().toEpochMilli();
        System.out.println(end - start);
        System.out.println(coloring);
    }

}